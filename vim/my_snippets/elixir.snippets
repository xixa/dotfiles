snippet mod "declares a module" b
defmodule ${1:<module_name>} do
	${2:use ${3:<module>}}
  $0
end
endsnippet

snippet def "declares a function within a module"
def ${1:<function_name & condition>} do
	$0
end
endsnippet

snippet defp "declares a private function within a module"
defp ${1:<function_name & condition>} do
	$0
end
endsnippet

snippet if "if/2 structure"
if ${1:<condition>} do
	$0
else

end
endsnippet

snippet cond "cond/1 structure"
cond do
	${1:<cond>} -> ${2:<return>}
end
endsnippet

snippet case "case/2 structure"
case ${1:<condition>} do
	$0
end
endsnippet

snippet tr "try/rescue|catch structure"
try do

end
endsnippet

snippet match "match structure"
${1:<condition>} -> ${2:<result>}
endsnippet

snippet end "closes a structure"

	$0
end
endsnippet

snippet doc "creates a module doc"
@moduledoc """
$0
"""
endsnippet

snippet fn "creates an anonymous function"
	fn ${1:<params>} -> ${2:<return>} end
endsnippet
