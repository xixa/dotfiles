snippet it "creates a test case" b
it('${1:description}', () => {
	expect(${2:...})
})
endsnippet

# to use this, 'viw' to select a word, then tab, then the snippet!
snippet $ "surrounds a selection in ${}"
${${VISUAL}}
endsnippet

snippet time "creates a setTimeout"
setTimeout((${VISUAL:<args>}) => ${2:<something>}, ${3:<time>})
endsnippet

snippet log "creates a console.log"
console.log($1)$0
endsnippet
# shorthand
# snippet "(\w+)\)\)" "Parenthesis (postfix)" r
# (`!p snip.rv = match.group(1)`$1)$0
# endsnippet

snippet aphro "Imports aphrodite" b
import { StyleSheet, css } from 'aphrodite'
endsnippet

snippet style "Creates an aphrodite style" b
const styles = StyleSheet.create({
	${1:<...>}: {
		${2:...}
	}
})
endsnippet

# graphql stuff
snippet graphql "Imports graphQL stuff" b
import {
	GraphQLObjectType,
	GraphQLSchema,
	${1:GraphQLInt,}
	${2:GraphQLString,}
	${3:GraphQLBoolean,}
} from 'graphql'
endsnippet

snippet gtype "Creates a graphQL type" b
const ${1:<TypeName>} = new GraphQLObjectType({
	name: '$1',
	description: '${2:...}',
	fields: () => {
		return {
			${3:gfield}$0
		}
	}
})
endsnippet

snippet gfield "Creates a graphQL field"
${1:<field>}: {
	type: `!p if "(" in t[2]: snip.rv = "new "`GraphQL${2:<Type>},
	resolve(${3:<type>}) {
		return $4`!p
if "root" in t[3]:
	snip.rv = ""
else:
	snip.rv = "%s.%s" % (t[3],t[1])`
	}
}${5:,}$0
endsnippet

# importing & exporting
snippet exportclass "Description" b
export default ${1:ClassName} {
	${2:...}
}
endsnippet

snippet exp
export default ${1:ClassName}
endsnippet

snippet imp "automatize imports" b
import $1 from '${2:./}${1/(\w)/\l$1/}'
endsnippet

snippet req "automatize commonjs 'import'" b
const $1 = require('${1/(\w)/\l$1/}')
endsnippet

# functions, classes and objects
snippet -> "arrow function" i
(${1:args}) => {
	${2:...}
}
endsnippet

snippet ob "creates an object"
{
	${1:content}
}
endsnippet

# react
snippet react "react component boilerplate (with options for Comps and PropTypes)" b
import React, { ${1:Component}${2:, PropTypes} } from 'react'

${1:export default }class ${2:ClassName} extends Component {${3:
	constructor(){
		super(...arguments)${4:
		...}
	}}
	render() {${5:
		...}
		return (
			${6:...}
		)
	}
}
endsnippet

snippet reacts "react boilerplate (simple)" b
const React = require('react')

export default (props) => (
	<$1>
		$0
	</$1>
)
endsnippet

snippet dom "imports ReactDOM" b
import ReactDOM from 'react-dom'
endsnippet

snippet propt
${1:CompName}.propTypes = {
	${2:first_prop}: PropTypes.${3:type}
}
endsnippet

snippet constructor "Creates a React comp constructor" b
constructor(props) {
	super(props)
	${0:...}
}
endsnippet

snippet fun
${1:function }${2:name}(${3:arguments}) {
	${4:content}
}
endsnippet
