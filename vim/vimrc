"
"    marcio ikematsu
"    marcio.ikematsu@usp.br
"

let mapleader=","

" GENERAL CONFIG
source ~/dotfiles/vim/config.vim
source ~/dotfiles/vim/layout.vim
source ~/dotfiles/vim/folds.vim
source ~/dotfiles/vim/plugins.vim
source ~/dotfiles/vim/xixa/mappings.vim
source ~/dotfiles/vim/syntax/svg.vim

" RECOGNIZING FILETYPES
" au BufRead,BufNewFile *.ex,*.exs set filetype=elixir
" au BufRead,BufNewFile *.eex set filetype=eelixir
au BufRead,BufNewFile *.svelte set filetype=svelte
" au BufRead,BufNewFile *.svelte set syntax=html filetype svelte

" LANGUAGE SPECIFIC CONFIG
autocmd! FileType clojure source ~/dotfiles/vim/xixa/languages/lisp.vim
autocmd! FileType typescript.tsx,typescriptreact,javascript.jsx,javascriptreact source ~/dotfiles/vim/xixa/languages/react.vim
autocmd! FileType python let tabsize=4
autocmd! FileType json set commentstring=//%s
autocmd! FileType json syntax match Comment +\/\/.\+$+
" autocmd FileType json echoerr 'This autocmd ran!'

" packadd! matchit

" auto completion
" filetype plugin on
" set complete=.,w,b,u,t,i,kspell
" set omnifunc=syntaxcomplete#Complete
" set completeopt=menu,menuone,preview,noselect,noinsert
"" enter inserts the option from a list instead of breaking a line
" set completeopt+=noinsert


"------------------------------------------- GENERAL PLUGINS
call plug#begin('~/.vim/plugged')

" stuff that really vIMPROVES vim.
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'suy/vim-context-commentstring' "allows for different commentstrings to be placed in different parts of the code (e.g. jsx)
Plug 'tpope/vim-unimpaired'
Plug 'SirVer/ultisnips'
Plug 'terryma/vim-multiple-cursors'
Plug 'jiangmiao/auto-pairs'
Plug 'liuchengxu/vim-clap', { 'do': ':Clap install-binary!' }
Plug 'shougo/deoplete.nvim', {'do': ':UpdateRemotePlugins'}
Plug 'gcmt/taboo.vim'
"Plug 'Shougo/denite.nvim', { 'do': ':UpdateRemotePlugins' }


" repl-like stuff
Plug 'jpalardy/vim-slime'
Plug 'metakirby5/codi.vim'

" finding stuff & jumping to places
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
" Plug 'wincent/loupe'
Plug 'scrooloose/nerdtree'
Plug 'tpope/vim-projectionist'
Plug 'easymotion/vim-easymotion'

" ui
Plug 'Yggdroot/indentLine'
Plug 'bling/vim-bufferline'

" INTEGRATION
" with unix
Plug 'tpope/vim-eunuch'

" with git
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" with ack
Plug 'mileszs/ack.vim'

" with make
Plug 'neomake/neomake'


"------------------------------------------- LANGUAGE SPECIFIC PLUGINS
" LangServs
" Plug 'autozimu/LanguageClient-neovim', {'for': ['python'], 'branch': 'next', 'do': 'bash install.sh'}
Plug 'dense-analysis/ale', { 'for': [ 'svelte']}
Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile', 'for': [
      \ 'elixir',
      \ 'haskell',
      \ 'purescript',
      \ 'elm',
      \ 'json',
      \ 'yaml',
      \ 'css',
      \ 'scss',
      \ 'scala',
      \ 'javascript',
      \ 'typescript',
      \ 'typescriptreact',
      \ 'typescript.tsx',
      \ 'tsx']}

" Plug 'nvim-treesitter/nvim-treesitter', {'for': ['typescript', 'typescriptreact', 'typescript.tsx', 'elm']}
Plug 'nvim-treesitter/nvim-treesitter'

" LISPs
" Plug 'kovisoft/paredit', { 'for': ['scheme', 'clojure'] }

" clojure
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }
" Plug 'guns/vim-clojure-static', { 'for': 'clojure' }
" Plug 'guns/vim-clojure-highlight', { 'for': 'clojure' }
" Plug 'clojure-vim/async-clj-omni', { 'for': 'clojure' }
Plug 'guns/vim-sexp', {'for': 'clojure'}
Plug 'tpope/vim-sexp-mappings-for-regular-people', { 'for': 'clojure' }

" elixir
Plug 'elixir-editors/vim-elixir', { 'for': ['elixir'] }
" Plug 'slashmili/alchemist.vim', { 'for': 'elixir' }
Plug 'elixir-lsp/elixir-ls', {'for': ['elixir'], 'do': 'mix deps.get && mix compile && mix elixir_ls.release -o release'}

" haskell
Plug 'Shougo/vimproc.vim', {'do' : 'make', 'for': ['haskell']}
Plug 'eagletmt/ghcmod-vim', { 'do': 'cabal install ghc-mod', 'for': 'haskell' }
" Plug 'ujihisa/unite-haskellimport', { 'for': 'haskell' }
" Plug 'ndmitchell/ghcid', { 'rtp': 'plugins/nvim' ,'for': 'haskell' }
" Plug 'Twinside/vim-hoogle', { 'for': 'haskell' }

" javascript/typescript
Plug 'leafgarland/typescript-vim', { 'for': ['typescript', 'typescript.tsx'] }

" purescript
Plug 'purescript-contrib/purescript-vim', { 'for': ['purescript'] }

" python
" Plug 'mitsuhiko/vim-python-combined', { 'for': 'python' }
" Plug 'nvie/vim-flake8', { 'for': ['python'] }
" Plug 'davidhalter/jedi', { 'for': 'python' }
" Plug 'deoplete-plugins/deoplete-jedi'

" react
Plug 'peitalin/vim-jsx-typescript', { 'for': [ 'javascript.jsx', 'typescript.tsx'] }
Plug 'alampros/vim-styled-jsx', { 'for': ['javascript.jsx', 'typescript.tsx'] }

" html
Plug 'othree/html5.vim'
Plug 'mattn/emmet-vim', {'for': ['html',  'css', 'scss', 'eelixir', 'svelte', 'typescript.tsx', 'typescriptreact', 'tsx']}

" sass
Plug 'cakebaker/scss-syntax.vim'

" scala
Plug 'derekwyatt/vim-scala'

" graphql
Plug 'jparise/vim-graphql', { 'for': ['graphql'] }

"------------------------------------------- VIM FOR WRITING
function! BuildComposer(info)
  if a:info.status != 'unchanged' || a:info.force
    !cargo build --release
  endif
endfunction

Plug 'euclio/vim-markdown-composer', {
      \'for': 'markdown',
      \'do': function('BuildComposer') }

Plug 'junegunn/goyo.vim', { 'for': 'text' }

call plug#end()

"auto-source virmc
" autocmd! BufWritePost @% :so %
autocmd! BufWritePost ~/.vimrc :so % "TODO: refer to this file

" filetype plugin indent on
